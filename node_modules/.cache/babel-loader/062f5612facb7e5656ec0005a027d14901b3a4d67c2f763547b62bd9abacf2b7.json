{"ast":null,"code":"import NavbarToggleButton from \"./NavbarToggleButton\";\nexport default {\n  name: \"base-nav\",\n  components: {\n    NavbarToggleButton\n  },\n  props: {\n    type: {\n      type: String,\n      default: \"primary\",\n      description: \"Navbar type (e.g default, primary etc)\"\n    },\n    title: {\n      type: String,\n      default: \"\",\n      description: \"Title of navbar\"\n    },\n    contentId: {\n      type: [String, Number],\n      default: Math.random().toString(),\n      description: \"Explicit id for the menu. By default it's a generated random number\"\n    },\n    effect: {\n      type: String,\n      default: \"dark\",\n      description: \"Effect of the navbar (light|dark)\"\n    },\n    round: {\n      type: Boolean,\n      default: false,\n      description: \"Whether nav has rounded corners\"\n    },\n    transparent: {\n      type: Boolean,\n      default: false,\n      description: \"Whether navbar is transparent\"\n    },\n    expand: {\n      type: Boolean,\n      default: false,\n      description: \"Whether navbar should contain `navbar-expand-lg` class\"\n    }\n  },\n  data() {\n    return {\n      toggled: false\n    };\n  },\n  methods: {\n    onTitleClick(evt) {\n      this.$emit(\"title-click\", evt);\n    },\n    closeMenu() {\n      this.toggled = false;\n    }\n  }\n};","map":{"version":3,"names":["NavbarToggleButton","name","components","props","type","String","default","description","title","contentId","Number","Math","random","toString","effect","round","Boolean","transparent","expand","data","toggled","methods","onTitleClick","evt","$emit","closeMenu"],"sources":["src/components/BaseNav.vue"],"sourcesContent":["<template>\n  <nav\n    class=\"navbar\"\n    :class=\"[\n      { 'navbar-expand-lg': expand },\n      { [`navbar-${effect}`]: effect },\n      { 'navbar-transparent': transparent },\n      { [`bg-${type}`]: type },\n      { rounded: round },\n    ]\"\n  >\n    <div class=\"container\">\n      <slot name=\"container-pre\"></slot>\n      <slot name=\"brand\">\n        <a class=\"navbar-brand\" href=\"#\" @click.prevent=\"onTitleClick\">\n          {{ title }}\n        </a>\n      </slot>\n      <navbar-toggle-button\n        :toggled=\"toggled\"\n        :target=\"contentId\"\n        @click.native.stop=\"toggled = !toggled\"\n      >\n      </navbar-toggle-button>\n\n      <slot name=\"container-after\"></slot>\n\n      <div\n        class=\"collapse navbar-collapse\"\n        :class=\"{ show: toggled }\"\n        :id=\"contentId\"\n        v-click-outside=\"closeMenu\"\n      >\n        <div class=\"navbar-collapse-header\">\n          <slot name=\"content-header\" :close-menu=\"closeMenu\"></slot>\n        </div>\n        <slot :close-menu=\"closeMenu\"></slot>\n      </div>\n    </div>\n  </nav>\n</template>\n<script>\nimport NavbarToggleButton from \"./NavbarToggleButton\";\n\nexport default {\n  name: \"base-nav\",\n  components: {\n    NavbarToggleButton,\n  },\n  props: {\n    type: {\n      type: String,\n      default: \"primary\",\n      description: \"Navbar type (e.g default, primary etc)\",\n    },\n    title: {\n      type: String,\n      default: \"\",\n      description: \"Title of navbar\",\n    },\n    contentId: {\n      type: [String, Number],\n      default: Math.random().toString(),\n      description:\n        \"Explicit id for the menu. By default it's a generated random number\",\n    },\n    effect: {\n      type: String,\n      default: \"dark\",\n      description: \"Effect of the navbar (light|dark)\",\n    },\n    round: {\n      type: Boolean,\n      default: false,\n      description: \"Whether nav has rounded corners\",\n    },\n    transparent: {\n      type: Boolean,\n      default: false,\n      description: \"Whether navbar is transparent\",\n    },\n    expand: {\n      type: Boolean,\n      default: false,\n      description: \"Whether navbar should contain `navbar-expand-lg` class\",\n    },\n  },\n  data() {\n    return {\n      toggled: false,\n    };\n  },\n  methods: {\n    onTitleClick(evt) {\n      this.$emit(\"title-click\", evt);\n    },\n    closeMenu() {\n      this.toggled = false;\n    },\n  },\n};\n</script>\n<style></style>\n"],"mappings":"AA0CA,OAAAA,kBAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACAC,IAAA;MACAA,IAAA,EAAAC,MAAA;MACAC,OAAA;MACAC,WAAA;IACA;IACAC,KAAA;MACAJ,IAAA,EAAAC,MAAA;MACAC,OAAA;MACAC,WAAA;IACA;IACAE,SAAA;MACAL,IAAA,GAAAC,MAAA,EAAAK,MAAA;MACAJ,OAAA,EAAAK,IAAA,CAAAC,MAAA,GAAAC,QAAA;MACAN,WAAA,EACA;IACA;IACAO,MAAA;MACAV,IAAA,EAAAC,MAAA;MACAC,OAAA;MACAC,WAAA;IACA;IACAQ,KAAA;MACAX,IAAA,EAAAY,OAAA;MACAV,OAAA;MACAC,WAAA;IACA;IACAU,WAAA;MACAb,IAAA,EAAAY,OAAA;MACAV,OAAA;MACAC,WAAA;IACA;IACAW,MAAA;MACAd,IAAA,EAAAY,OAAA;MACAV,OAAA;MACAC,WAAA;IACA;EACA;EACAY,KAAA;IACA;MACAC,OAAA;IACA;EACA;EACAC,OAAA;IACAC,aAAAC,GAAA;MACA,KAAAC,KAAA,gBAAAD,GAAA;IACA;IACAE,UAAA;MACA,KAAAL,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}